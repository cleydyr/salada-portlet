/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.ufpe.cin.da.salada.service.base;

import br.ufpe.cin.da.salada.model.Sorteio;
import br.ufpe.cin.da.salada.service.SorteioLocalService;
import br.ufpe.cin.da.salada.service.persistence.SorteioPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the sorteio local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link br.ufpe.cin.da.salada.service.impl.SorteioLocalServiceImpl}.
 * </p>
 *
 * @author thecleydyr
 * @see br.ufpe.cin.da.salada.service.impl.SorteioLocalServiceImpl
 * @see br.ufpe.cin.da.salada.service.SorteioLocalServiceUtil
 * @generated
 */
public abstract class SorteioLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements SorteioLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link br.ufpe.cin.da.salada.service.SorteioLocalServiceUtil} to access the sorteio local service.
	 */

	/**
	 * Adds the sorteio to the database. Also notifies the appropriate model listeners.
	 *
	 * @param sorteio the sorteio
	 * @return the sorteio that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Sorteio addSorteio(Sorteio sorteio) throws SystemException {
		sorteio.setNew(true);

		return sorteioPersistence.update(sorteio);
	}

	/**
	 * Creates a new sorteio with the primary key. Does not add the sorteio to the database.
	 *
	 * @param sorteioId the primary key for the new sorteio
	 * @return the new sorteio
	 */
	@Override
	public Sorteio createSorteio(long sorteioId) {
		return sorteioPersistence.create(sorteioId);
	}

	/**
	 * Deletes the sorteio with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param sorteioId the primary key of the sorteio
	 * @return the sorteio that was removed
	 * @throws PortalException if a sorteio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Sorteio deleteSorteio(long sorteioId)
		throws PortalException, SystemException {
		return sorteioPersistence.remove(sorteioId);
	}

	/**
	 * Deletes the sorteio from the database. Also notifies the appropriate model listeners.
	 *
	 * @param sorteio the sorteio
	 * @return the sorteio that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Sorteio deleteSorteio(Sorteio sorteio) throws SystemException {
		return sorteioPersistence.remove(sorteio);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Sorteio.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return sorteioPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.ufpe.cin.da.salada.model.impl.SorteioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return sorteioPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.ufpe.cin.da.salada.model.impl.SorteioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return sorteioPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return sorteioPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return sorteioPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Sorteio fetchSorteio(long sorteioId) throws SystemException {
		return sorteioPersistence.fetchByPrimaryKey(sorteioId);
	}

	/**
	 * Returns the sorteio with the primary key.
	 *
	 * @param sorteioId the primary key of the sorteio
	 * @return the sorteio
	 * @throws PortalException if a sorteio with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Sorteio getSorteio(long sorteioId)
		throws PortalException, SystemException {
		return sorteioPersistence.findByPrimaryKey(sorteioId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return sorteioPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the sorteios.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.ufpe.cin.da.salada.model.impl.SorteioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of sorteios
	 * @param end the upper bound of the range of sorteios (not inclusive)
	 * @return the range of sorteios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Sorteio> getSorteios(int start, int end)
		throws SystemException {
		return sorteioPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of sorteios.
	 *
	 * @return the number of sorteios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSorteiosCount() throws SystemException {
		return sorteioPersistence.countAll();
	}

	/**
	 * Updates the sorteio in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param sorteio the sorteio
	 * @return the sorteio that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Sorteio updateSorteio(Sorteio sorteio) throws SystemException {
		return sorteioPersistence.update(sorteio);
	}

	/**
	 * Returns the mensagem remote service.
	 *
	 * @return the mensagem remote service
	 */
	public br.ufpe.cin.da.salada.service.MensagemService getMensagemService() {
		return mensagemService;
	}

	/**
	 * Sets the mensagem remote service.
	 *
	 * @param mensagemService the mensagem remote service
	 */
	public void setMensagemService(
		br.ufpe.cin.da.salada.service.MensagemService mensagemService) {
		this.mensagemService = mensagemService;
	}

	/**
	 * Returns the sorteio local service.
	 *
	 * @return the sorteio local service
	 */
	public br.ufpe.cin.da.salada.service.SorteioLocalService getSorteioLocalService() {
		return sorteioLocalService;
	}

	/**
	 * Sets the sorteio local service.
	 *
	 * @param sorteioLocalService the sorteio local service
	 */
	public void setSorteioLocalService(
		br.ufpe.cin.da.salada.service.SorteioLocalService sorteioLocalService) {
		this.sorteioLocalService = sorteioLocalService;
	}

	/**
	 * Returns the sorteio persistence.
	 *
	 * @return the sorteio persistence
	 */
	public SorteioPersistence getSorteioPersistence() {
		return sorteioPersistence;
	}

	/**
	 * Sets the sorteio persistence.
	 *
	 * @param sorteioPersistence the sorteio persistence
	 */
	public void setSorteioPersistence(SorteioPersistence sorteioPersistence) {
		this.sorteioPersistence = sorteioPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("br.ufpe.cin.da.salada.model.Sorteio",
			sorteioLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"br.ufpe.cin.da.salada.model.Sorteio");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Sorteio.class;
	}

	protected String getModelClassName() {
		return Sorteio.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = sorteioPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = br.ufpe.cin.da.salada.service.MensagemService.class)
	protected br.ufpe.cin.da.salada.service.MensagemService mensagemService;
	@BeanReference(type = br.ufpe.cin.da.salada.service.SorteioLocalService.class)
	protected br.ufpe.cin.da.salada.service.SorteioLocalService sorteioLocalService;
	@BeanReference(type = SorteioPersistence.class)
	protected SorteioPersistence sorteioPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SorteioLocalServiceClpInvoker _clpInvoker = new SorteioLocalServiceClpInvoker();
}